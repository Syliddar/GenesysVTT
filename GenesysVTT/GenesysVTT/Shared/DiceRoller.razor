@using GenesysVTT.Data
@using GenesysVTT.Services
@using Microsoft.AspNetCore.SignalR.Client
@using System.Text.Json

@inject ChatHub _chatHub
@inject NavigationManager navigationManager

<div class="row">
    <div class="col-12">
        <h1>
            Current Pool: @foreach (var x in currentPoolString)
            {
                switch (x)
                {
                    case 'p':
                        <span class="genesys dice proficiency">l</span>
                        break;
                    case 'a':
                        <span class="genesys dice ability">k</span>
                        break;
                    case 'b':
                        <span class="genesys dice boost">j</span>
                        break;
                    case 'c':
                        <span class="genesys dice challenge">l</span>
                        break;
                    case 'd':
                        <span class="genesys dice difficulty">k</span>
                        break;
                    case 's':
                        <span class="genesys dice setback">j</span>
                        break;
                }

            }
        </h1>
    </div>
    <div class="col-3 border border-dark  p-2 m-2">
        <div class="row text-center mx-auto my-auto">
            <div class="col-4">
                <button class="btn btn-primary col-12" @onclick="AddProficiency">+</button>
                <button class="btn btn-primary col-12 mt-1" @onclick="RemoveProficiency">-</button>
            </div>
            <div class="col-4 mt-3">
                <h1>@DicePool.Where(d=>d.Type == DiceType.Proficiency).Count()</h1>
            </div>
            <div class="col-4 mt-3">
                <h1 class="genesys dice proficiency">l</h1>
            </div>
        </div>
    </div>
    <div class="col-3 border border-dark  p-2 m-2">
        <div class="row text-center mx-auto my-auto">
            <div class="col-4">
                <button class="btn btn-primary col-12" @onclick="AddAbility">+</button>
                <button class="btn btn-primary col-12 mt-1" @onclick="RemoveAbility">-</button>
            </div>
            <div class="col-4 mt-3">
                <h1>@DicePool.Where(d=>d.Type == DiceType.Ability).Count()</h1>
            </div>
            <div class="col-4 mt-3">
                <h1 class="genesys dice ability">k</h1>
            </div>
        </div>
    </div>
    <div class="col-3 border border-dark  p-2 m-2">
        <div class="row text-center mx-auto my-auto">
            <div class="col-4">
                <button class="btn btn-primary col-12" @onclick="AddBoost">+</button>
                <button class="btn btn-primary col-12 mt-1" @onclick="RemoveBoost">-</button>
            </div>
            <div class="col-4 mt-3">
                <h1>@DicePool.Where(d=>d.Type == DiceType.Boost).Count()</h1>
            </div>
            <div class="col-4 mt-3">
                <h1 class="genesys dice boost">j</h1>
            </div>
        </div>
    </div>
    <div class="col-3 border border-dark  p-2 m-2">
        <div class="row text-center mx-auto my-auto">
            <div class="col-4">
                <button class="btn btn-primary col-12" @onclick="AddChallenge">+</button>
                <button class="btn btn-primary col-12 mt-1" @onclick="RemoveChallenge">-</button>
            </div>
            <div class="col-4 mt-3">
                <h1>@DicePool.Where(d=>d.Type == DiceType.Challenge).Count()</h1>
            </div>
            <div class="col-4 mt-3">
                <h1 class="genesys dice challenge">l</h1>
            </div>
        </div>
    </div>
    <div class="col-3 border border-dark  p-2 m-2">
        <div class="row text-center mx-auto my-auto">
            <div class="col-4">
                <button class="btn btn-primary col-12" @onclick="AddDifficulty">+</button>
                <button class="btn btn-primary col-12 mt-1" @onclick="RemoveDifficulty">-</button>
            </div>
            <div class="col-4 mt-3">
                <h1>@DicePool.Where(d=>d.Type == DiceType.Difficulty).Count()</h1>
            </div>
            <div class="col-4 mt-3">
                <h1 class="genesys dice difficulty">k</h1>
            </div>
        </div>
    </div>
    <div class="col-3 border border-dark  p-2 m-2">
        <div class="row text-center mx-auto my-auto">
            <div class="col-4">
                <button class="btn btn-primary col-12" @onclick="AddSetback">+</button>
                <button class="btn btn-primary col-12 mt-1" @onclick="RemoveSetback">-</button>
            </div>
            <div class="col-4 mt-3">
                <h1>@DicePool.Where(d=>d.Type == DiceType.Setback).Count()</h1>
            </div>
            <div class="col-4 mt-3">
                <h1 class="genesys dice setback">j</h1>
            </div>
        </div>
    </div>
</div>

<div class="col-12">
    <button class="btn btn-primary" @onclick="RollDice">Roll!</button>
    <button class="btn btn-info" @onclick="Reset">Reset</button>
</div>
@code {
    [CascadingParameter(Name = "UserName")]
    public string _username { get; set; } = "";

    private HubConnection _hubConnection;
    private string _hubUrl = "";

    private List<Dice> DicePool = new List<Dice>();
    private Result? result;
    private string currentPoolString = "";

    private async void RollDice()
    {
        if (DicePool.Any())
        {
            result = new Result(DicePool);
            await _hubConnection.SendAsync("Broadcast", _username, JsonSerializer.Serialize(result.ToResultJson()));
            StateHasChanged();
        }
    }
    private void Reset()
    {
        DicePool = new List<Dice>();
        currentPoolString = "";
    }

    protected override async Task OnInitializedAsync()
    {
        string baseUrl = navigationManager.BaseUri;

        _hubUrl = baseUrl.TrimEnd('/') + ChatHub.HubUrl;

        _hubConnection = new HubConnectionBuilder()
            .WithUrl(_hubUrl)
            .Build();
        await _hubConnection.StartAsync();
    }



    #region DiceMethods
    private void AddBoost()
    {
        DicePool.Add(new Boost());
        UpdateDicePoolString();
    }
    private void RemoveBoost()
    {
        if (DicePool.Any(d => d.Type == DiceType.Boost))
            DicePool.Remove(DicePool.Last(x => x.Type == DiceType.Boost));
        UpdateDicePoolString();
    }
    private void AddSetback()
    {
        DicePool.Add(new Setback());
        UpdateDicePoolString();
    }
    private void RemoveSetback()
    {
        if (DicePool.Any(d => d.Type == DiceType.Setback))
            DicePool.Remove(DicePool.Last(x => x.Type == DiceType.Setback));
        UpdateDicePoolString();
    }
    private void AddAbility()
    {
        DicePool.Add(new Ability());
        UpdateDicePoolString();
    }
    private void RemoveAbility()
    {
        if (DicePool.Any(d => d.Type == DiceType.Ability))
            DicePool.Remove(DicePool.Last(x => x.Type == DiceType.Ability));
        UpdateDicePoolString();
    }
    private void AddDifficulty()
    {
        DicePool.Add(new Difficulty());
        UpdateDicePoolString();
    }
    private void RemoveDifficulty()
    {
        if (DicePool.Any(d => d.Type == DiceType.Difficulty))
            DicePool.Remove(DicePool.Last(x => x.Type == DiceType.Difficulty));
        UpdateDicePoolString();
    }
    private void AddProficiency()
    {
        DicePool.Add(new Proficiency());
        UpdateDicePoolString();
    }
    private void RemoveProficiency()
    {
        if (DicePool.Any(d => d.Type == DiceType.Proficiency))
            DicePool.Remove(DicePool.Last(x => x.Type == DiceType.Proficiency));
        UpdateDicePoolString();
    }
    private void AddChallenge()
    {
        DicePool.Add(new Challenge());
        UpdateDicePoolString();
    }
    private void RemoveChallenge()
    {
        if (DicePool.Any(d => d.Type == DiceType.Challenge))
            DicePool.Remove(DicePool.Last(x => x.Type == DiceType.Challenge));
        UpdateDicePoolString();
    }
    private void UpdateDicePoolString()
    {
        currentPoolString = "";
        if (DicePool.Any(x => x.Type == DiceType.Proficiency))
        {
            for (int x = 0; x < DicePool.Count(x => x.Type == DiceType.Proficiency); x++)
            {
                currentPoolString += "p";
            }
        }
        if (DicePool.Any(x => x.Type == DiceType.Ability))
        {
            for (int x = 0; x < DicePool.Count(x => x.Type == DiceType.Ability); x++)
            {
                currentPoolString += "a";
            }
        }
        if (DicePool.Any(x => x.Type == DiceType.Boost))
        {
            for (int x = 0; x < DicePool.Count(x => x.Type == DiceType.Boost); x++)
            {
                currentPoolString += "b";
            }
        }
        if (DicePool.Any(x => x.Type == DiceType.Challenge))
        {
            for (int x = 0; x < DicePool.Count(x => x.Type == DiceType.Challenge); x++)
            {
                currentPoolString += "c";
            }
        }
        if (DicePool.Any(x => x.Type == DiceType.Difficulty))
        {
            for (int x = 0; x < DicePool.Count(x => x.Type == DiceType.Difficulty); x++)
            {
                currentPoolString += "d";
            }
        }
        if (DicePool.Any(x => x.Type == DiceType.Setback))
        {
            for (int x = 0; x < DicePool.Count(x => x.Type == DiceType.Setback); x++)
            {
                currentPoolString += "s";
            }
        }
    }
    #endregion
}