@page "/"

@inject ChatHub _logService
@inject NavigationManager navigationManager
@using Microsoft.AspNetCore.SignalR.Client;
@using GenesysVTT.Data
@using GenesysVTT.Services
@using System.Text.Json;

<PageTitle>Index</PageTitle>
<div class=container>
    <div class="row">
        <div class="col-12">
            @if (!_isChatting)
            {
                <p>
                    Enter your name to start chatting:
                </p>

                <input type="text" maxlength="32" @bind="@_username" />
                <button type="button" @onclick="@Chat"><span class="oi oi-chat" aria-hidden="true"></span> Chat!</button>

                // Error messages
                @if (_message != null)
                {
                    <div class="invalid-feedback">@_message</div>
                    <small id="emailHelp" class="form-text text-muted">@_message</small>
                }
            }
            else
            {
                <div class="row">
                    <div class="col-12">
                        <span class="oi oi-person mr-2" aria-hidden="true"></span>
                        <span>You are connected as <b>@_username</b></span>
                        <button class="btn btn-sm btn-warning ml-md-auto" @onclick="@DisconnectAsync">Disconnect</button>
                    </div>
                </div>
                <div class="row">
                    <div class="col-12">
                        <CascadingValue Value="_username" Name="UserName">
                            <DiceRoller />
                        </CascadingValue>
                    </div>
                </div>
                <br />
                <div class="row">
                    <div class="col-6" id="scrollbox">
                        @foreach (var item in _messages.OrderByDescending(x => x.Timestamp))
                        {
                            @if (item.IsNotice)
                            {
                                <div class="alert alert-info">@item.Body</div>
                            }
                            @if (item.IsDiceResult)
                            {
                                <div class="@item.CSS">
                                    <div class="user">@item.Username</div>
                                    <div class="msg">
                                        Rolled Dice: <br />
                                        <span>
                                            @foreach (var x in @item.Body.Split("[Dice]")[1].Split("|")[0])
                                            {
                                                switch (x)
                                                {
                                                    case 'p':
                                                        <span class="genesys dice proficiency">l</span>
                                                        break;
                                                    case 'a':
                                                        <span class="genesys dice ability">k</span>
                                                        break;
                                                    case 'b':
                                                        <span class="genesys dice boost">j</span>
                                                        break;
                                                    case 'c':
                                                        <span class="genesys dice challenge">l</span>
                                                        break;
                                                    case 'd':
                                                        <span class="genesys dice difficulty">k</span>
                                                        break;
                                                    case 's':
                                                        <span class="genesys dice setback">j</span>
                                                        break;
                                                }
                                            }
                                        </span>
                                        Result: <br />
                                        <span class=genesys>@item.Body.Split("[Dice]")[1].Split("|")[1]</span>
                                    </div>
                                </div>
                            }
                            else
                            {
                                <div class="@item.CSS">
                                    <div class="user">@item.Username</div>
                                    <div class="msg">
                                        @item.Body
                                    </div>
                                </div>
                            }
                        }
                    </div>
                    <div class="col-6">
                        <textarea class="input-lg" placeholder="enter your comment" @bind="@_newMessage"></textarea>
                        <button class="btn btn-primary" @onclick="@(() => SendAsync(_newMessage))">Send</button>
                    </div>
                </div>
            }


        </div>
    </div>
</div>

@code {

    // flag to indicate chat status
    private bool _isChatting = false;
    // name of the user who will be chatting
    private string _username = "";
    // on-screen message
    private string _message = "";
    // new message input
    private string _newMessage = "";
    // list of messages in chat
    private List<Message> _messages = new List<Message>();
    private string _hubUrl = "";
    private HubConnection _hubConnection;
    public async Task Chat()
    {
        // check username is valid
        if (string.IsNullOrWhiteSpace(_username))
        {
            _message = "Please enter a name";
            return;
        };

        try
        {
            // Start chatting and force refresh UI.
            _isChatting = true;
            await Task.Delay(1);

            // remove old messages if any
            _messages.Clear();

            // Create the chat client
            string baseUrl = navigationManager.BaseUri;

            _hubUrl = baseUrl.TrimEnd('/') + ChatHub.HubUrl;

            _hubConnection = new HubConnectionBuilder()
                .WithUrl(_hubUrl)
                .Build();

            _hubConnection.On<string, string>("Broadcast", BroadcastMessage);

            await _hubConnection.StartAsync();

            //await SendAsync($"[Notice] {_username} joined chat room.");
        }
        catch (Exception e)
        {
            _message = $"ERROR: Failed to start chat client: {e.Message}";
            _isChatting = false;
        }
    }

    private void BroadcastMessage(string name, string message)
    {
        bool isMine = name.Equals(_username, StringComparison.OrdinalIgnoreCase);
        _messages.Add(new Message(_username, message, isMine));
        StateHasChanged();
    }

    private async Task DisconnectAsync()
    {
        if (_isChatting)
        {
            await SendAsync($"[Notice] {_username} left chat room.");

            await _hubConnection.StopAsync();
            await _hubConnection.DisposeAsync();

            _hubConnection = null;
            _isChatting = false;
        }
    }

    private async Task SendAsync(string _message)
    {
        if (_isChatting && !string.IsNullOrWhiteSpace(_message))
        {
            await _hubConnection.SendAsync("Broadcast", _username, _message);
            _newMessage = string.Empty;
        }
    }

}